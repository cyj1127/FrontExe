========================================= 02.27(화)===============================================

border 종류 찾아보기
명령어 다시 복습
collapse- *테이블의 닿는 곳에 1개의 선만 존재
caption - 테이블의 제목
th - table header
tr - 테이블의 행을 나눠준다.

===코드정렬 버튼은 shift + alt + F 키===

--행의 같은 내용을 합치고 싶을 때는 rowspan ="차지할 칸의 수"
            <!-- 2번째 행 -->
            <tr>
                <td rowspan="2">선물용</td>
                <td>3kg</td>
                <td>11~16과</td>
                <td>35,000원</td>
            </tr>
             <!-- 3번째 행 -->
            <tr>
                <td>5kg</td>
                <td>18~26과</td>
                <td>52,000원</td>
            </tr>

width 넓이
height 높이

--이미지 불러올 때 - <img src="이미지 주소 or 경로">

하나로 묶어서 관리하고 싶을 때.
   #container{
            width: 800px;
            margin:0 auto;/*가운데 위치하게 해준다*/
        }
        선언 후 묶고싶은 부분에 
        <div id="container">"묶고싶은 내용"</div>
        을 넣어주면 된다.

-비디오 삽입 후 실행시
<video src="파일의 경로,주소" controls width="700"></video>
//크기 설정시 ex)width="700" 넣어주어야 한다.
controls는 재생버튼 및 동작에 필요한 버튼을 활성화 시켜준다.
 <video src="파일의 경로,주소" autoplay muted loop width="700"></video>
 //auto 플레이를 원하지 않는다면 autoplay muted loop 제거

 -mp3 파일 삽입
 <embed src="파일의 경로,주소">

 -오디오 파일 삽입
 <audio src="파일의 경로,주소" controls></audio>

========================================= 02.28(수)===============================================

 -form은 데이터를 묶어서 서버에 전달할 때 사용한다.
 <form>묶고싶은 데이터<form>
 26,27 예제는 같은 데이터를 갖게 된다.
 lable과 input을 나눠서 써도 되고 lable 안에 input을 넣어서 써줘도 된다!
 input의 데이터는 다양하다.
 
 form action=""에 들어가는 값은 해당 위치로 데이터를 전송해준다.(예제28참조)

 min, max 를 통해 값을 제한할 수 있다.
 value 값은 초기값 설정.

 -form의 method 방식은 get, post 두 가지 방식이 있다.


-hidden은 화면에 보이지 않게 한다.
-autofocus 실행시키면 자동으로 포커스를 가게 하겠다.
-required 반드시 입력해야한다. 공백 xxxx
-placeholder 입력하기 전 칸 안에 연하게 써있는 글씨. ex)하이픈(-) 빼고 입력하세요.
-readonly value을 수정할 수 없고 읽기전용으로 만들어준다.
option의 selected 는 기본으로 선택되어있게 할 수 있다.

-textarea 메모를 적어야 하는 칸을 만들 때 사용한다.

-blockquote 들여쓰기 기능이다.

-색상은 #fff ~ #ffffff 까지
>>>갈수록 다양한 색 표현 가능

-inline p태그 안에 style="color"로 색상 등 변경 가능하다
-!important 는
[우선순위]를 무시하고 적용 가능하다.
!import > inline > 내부 스타일 > 외부 스타일

-{}앞에 *을 붙히면 모든 요소를 포함하여 적용하게 된다.
<style>
        /*모든 요소*/
        *{
            margin: 0;
            padding: 0;
        }
    </style>

    특정 부분만 style을 주고싶을 때 클래스로 묶고
    .클래스명{ 으로 바꿔준다 (css 07번 예제 참조)
        
    }

-id는 2개 이상 쓰게 된다면 처음 썼던 id만 적용된다.
2개 이상은 사용 불가    
 
-text-align: center; 텍스트를 중간으로 옮겨주는 역할.

-일부 변경은 <span class="~">내용</span> 이라면
전체 변경은 태그 안에 선언. ex) <p class="title">내용</p>

여러 데이터를 나열해서 사용할 때는 select로 묶어주고
option을 사용해서 데이터를 입력해주면 나열이 된다.


========================================= 02.29(목)===============================================

-text-align
center 중앙정렬
justify 양쪽정렬
end 우측정렬

-line-height 줄 끼리 세로 간격, 1이 기본값//0.7<2.1
height값과 같게, 세로 가운데 정렬

-text-decoration
none 기본값
underline 밑줄
overline 글자 윗줄
line through 글자에 선 그어짐

-text-shadow
글자 번짐 효과.
사방 픽셀, 색을 넣어주면 된다.
ex).shadow1{
            color: red;
            text-shadow: 1px 1px black;
        }

-text-transform
capitalize 첫 번째 글자 대문자
uppercase 모두 대문자
lowercase 모두 소문자

-text-spacing
letter-spacing 0.1em이 기본, em만큼 글자 간격을 벌려준다
ex).spacing1{
            letter-spacing: 0.2em;
        }

-list-style
image: url 을 하면 이미지도 불러올 수 있다.
position 리스트 내용의 위치를 바꿔준다.
inside는 들여쓰기 기능

-solid는 실선을 의미한다.
border에서 dotted,dashed를 사용하면 점선을 그릴 수 있다.

ctrl + x 해당 열 지우기

*를 붙히면 하위의 모든 요소들을 포함.
ex)<style>
        body * {
            border: 1px solid blue;
        }
    </style>

-span은 특정 부분만 바꾸고 싶을 때 사용한다.

-p태그 안에 class를 주고 스타일을 바꾸게 되면 한 줄로 인식되어
그 줄을 모두 차지하고 다음 내용은 다음줄로 내려가게 된다.

-블록레벨 요소: 태그중에 h1,div,p처럼 혼자 한 줄을 차지하는 것
                요소의 너비가 100%
                오른쪽에 다른 요소가 올 수 없다. 
                왜냐? 한 줄을 모두 차지하기 때문.

-블록레벨 요소는 모두 Box Style => Box Model
컨텐츠 영역(내 몸) + padding(속옷) + Border(테두리: 가장 바깥 옷)
+ Magin(다른 요소와의 간격)

-인라인 레벨 요소: 한 줄 요소를 차지하지 않고 컨텐츠 영역만 차지하므로
                    우측 공간에 다른 요소가 올 수 있다.
                    span,img,strong...등이 인라인 레벨에 속한다.

-내용이 들어가는 영역이 contents 영역 이라고 한다.
 
 -border-box는 레이아웃 계산하기가 편리하다.
 contents+padding+border 영역크기에 아래 설정을 적용하기 때문에                        

-기본 설정은 content-box 이지만, 
box-sizing : border-box;를 넣어주면
padding, border 까지 합쳐져 계산하게 된다.
ex).box1{
            width: 400px;
            height: 100px;
            padding: 20px;
            border: 10px solid #f00;
        }
        .box2{
            box-sizing: border-box;
            width: 400px;
            height: 100px;
            padding: 20px;
            border: 10px solid #00f;
        }
같은 400px,100px 이지만 밑에는 border-box를 주었기 때문에 크기가 다르게
나타난다.        

-display:inline-block; 을 주게되면 속성은 유지하되 블록레벨로 인식되지 않게
만들어준다.

-border-radius: 20px; 주게되면 모서리를 둥글게 처리해준다!
숫자가 높을수록 원에 가까워진다. 20px,40px의 경우 40px이 더 원형에 가깝다!

-border: 안에 border의 속성을 전부 넣어서 한 번에 수정할 수 있다!
none 으로 주면 테두리가 사라진다!

-nav 는 div와 기능은 똑같지만 네비게이션의 역할이다!
다른 곳에 연결해주는 역할도 한다

-float는 떠다닌다는 뜻으로 left를 넣어주면 왼쪽으로 붙힌다 라는 의미를 가진다.
float를 계속 사용하다 clear를 사용하게 되면 float 기능을 해제하고 
원래대로 돌아간다.

-예전엔 경계를 나눌 때 모두 div 를 사용했지만 요즘엔 각자의 이름이 있다.
ex)<header></header>
        <aside></aside>
        <section></section>
        <footer></footer>
문서를 읽을 때 의미를 잘 파악하기 위해 따로 이름을 준다        

-position의 종류
static : 기본값, 문서의 흐름에 맞춰 배치
relative : static 과 동일하지만, 위치값을 지정 가능
absolute : relative를 사용한 상위 요소를 기준으로 위치값을 지정
만약 상위 요소가 없다면, 전체 영역의 absolute위치를 기준으로 정한다.
fixed : 브라우저 창을 기준으로 위치 지정

-position을 선언 후 left,right,top,bottom 같은 위치에 값을 넣어줘야한다.
ex)right: 100px, top: 50px 등....


========================================= 03.04(월)===============================================


-hover
마우스가 올라갔을 때 색깔 변경.

-background-clip
border box까지 백그라운드를 채움
padding box 박스를 제외하고 채움
content box 내용만 백그라운드를 채움

-배경이미지(53.bg3 참조)
 #bg1{background-size: auto;} /*원래 배경 이미지 크기로 표시*/
        #bg2{background-size: 200px;} /*너비는 200px, 높이는 자동계산*/
        #bg3{background-size: 50%;} /*배경 이미지 어비는 요소 너비의 50%, 높이는 자동계산*/
        #bg4{background-size: 100% 100%;} /*배경 이미지 너비와 높이는 요소 너비의 100%, 높이도 100%*/
        #bg5{background-size: contain;}/*요소 안의 배경 이미지가 모두 포함되도록*/
        #bg6{background-size: cover;}/*요소를 완전히 덮도록 배경이미지 표시*/

cover는 확대 축소를 해도 이미지는 전체 화면을 채운 그대로이다.
contain은 이미지가 요소 안에 모두 포함되기 때문에 원본의 가로세로 비율로 맞춰진다.
그로인해 여백이 생길 수 있음.

-그라데이션 효과
 background: linear-gradient(45deg, #f00, white); 직선의 효과
  background: radial-gradient(circle,white,yellow,red); 곡선의 효과

-패턴 효과(63_pattern 참조)
.grad1{
background: red;
background: repeating-linear-gradient(yellow,yellow 20px,red 20px, red 40px);
()안의 값은, 맨 위 부터 어떠한 색상이 몇px만큼 들어갈지 정한다.


-section 설명
section p{ /* secction의 하위 요소(자식,자손) 중에 모든 p태그*/
            color: blue;
        }
section > p 를 주게 된다면 하위요소 자식 중에 모든p태그에만 적용이된다.

-adj 는 인접하다의 뜻
h1 + p{ /*h1의 형제 요소 중에 1번째 p요소에 적용*/
            color: blue;
        }

-sibling은 형제...의 뜻
 h1 ~ p{ /*h1 요소와 형제인 모든 p요소에 적용*/
            color: blue;
        }

-a태그를 가진 요소 중에 href 속성이 있는 모든 요소에 적용
a[href]{
        background: yellow;
        border: 1px solid #ccc;
        font-weight: normal;
    }

-하이퍼링크
<li><a href="https://www.w3schools.com/html/html_basic.asp" target="_blank">HTML</a></li>
<li><a href="https://www.w3schools.com/css/css_display_visibility.asp">CSS</a></li>
<li><a href="https://www.w3schools.com/css/css_rwd_mediaqueries.asp">미디어쿼리</a></li>

target을 주면 창을 새로 띄운다, 반대로 주지 않으면 현재 창에서 해당 링크의 사이트의 창으로 교체해준다.

-a요소의 title 속성값이 us이거나 us로 시작하는 요소
a[title |="us"]{background: url('../images/us.png')no-repeat left center;}

- a요소의 href 속성의 값이 hwp로 끝나는 요소
a[href $= hwp]{
    background: url('../images/hwp_icon.gif') center right no-repeat;
     padding-right: 25px;
}

<style>안에 동일한 내용이 두 개 있으면 가장 아래있는(최근에 적용된) 스타일만 나타난다.

:link - 가만히 보여질 때 상태
:visited - 방문한 링크 스타일 적용
:hover - 마우스 위에 있을 때 스타일 적용
:active - 활성화(클릭) 했을 때 스타일 적용
:focus - 초점이 맞추어졌을 때

순서는 다음과 같이 정의한다
        순서가 바뀌면 스타일이 제대로 적용되지 않는다
        LoVe HAte
        :link,:visited,:hover,:active

-해당되는 id로 링크했을 때 스타일을 적용하고 싶으면 target을 쓴다

ex)intro라는 id로 이동함.
 #intro:target{
            background-color: #0069e0;
            color: #fff;
        } 

- li요소이면서 클래스new를 가진 요소를 찾고 이 요소 뒤에 아래 스타일을 추가한다.
        li.new::after{
            content: "NEW!";
            font-size: x-small;


========================================= 03.05(화)===============================================


-이동 translate(84예제)
ex)#movex:hover{transform:translateX(50px);}
        #movey:hover{transform:translateY(50px);}
        #movexy:hover{transform:translate(10px,20px);}

-확장 scale(85예제)
ex)#scalex:hover{transform:scalex(2);}
        #scaley:hover{transform:scaley(1.5);}
        #scale:hover{transform:scale(0.7);}

-회전 rotate(86예제)
rotate:hover에 효과.
 ex)transform: rotate(40deg);

 -원근감 perspective(87예제)
 ex).rotatex:hover{transform:rotateX(50deg) ;}
        #pers{perspective:300px;}

-3차원회전(88예제)
.origin > div{
            width: 100px;
            height: 100px;
            background-color: orange;
            transition: all 3s; /*3초 동안 회전하도록 트랜지션 적용*/
        }
#rotatex:hover{transform: rotateX(55deg);}
#rotatey:hover{transform: rotateY(55deg);}
#rotatez:hover{transform: rotateZ(55deg);}
#rotatexyz:hover{transform: rotate3d(2.5,1.2,-1.5,55deg);} /*x,y,z 축의 방향 벡터, 회전*/

-skew(비스듬히 움직이다, 왜곡하다)(89,90예제)
#skewx:hover{transform: skewx(55deg);}
        #skewy:hover{transform: skewy(55deg);}
        #skewxy:hover{transform: skew(-25deg,-15deg);}

-transition(91예제)
transition-property: width,height; /*트랜지션 대상 - 너비, 높이*/
transition-duration: 2s,1s; /*트랜지션 시간- 2초,1초*/
property를 준 다음 duration으로 대상별 걸리는 시간도 따로 입력해야함!!

.box:hover{ (마우스 올려놓을 시 해당 크기만큼 변한다!,hover의 속성)
            width: 200px;
            height: 120px;
        }

-애니메이션 효과(94,95예제)
animation-duration: 3s;
animation-iteration-count: infinite;

 /*shape은 애니메이션 정의*/
        @keyframes shape{
            from{
                border: 1px solid transparent; /* 1px 투명한 테두리*/
            }to{
                border: 1px solid #000;
                border-radius: 50%;
            }
        }

-애니메이션의 조금더 매끄러운 연결을 위해서는
@keyframes rotate{
            from{transform: perspective(120px) rotateX(0deg) rotateY(0deg);}
            50%{transform: perspective(120px) rotateX(-180deg) rotateY(0deg);}
            to{transform: perspective(120px) rotateX(0deg) rotateY(-180deg);}
        }
위 처럼 50%지점의 값도 넣어주게 되면 매끄러워진다.

animation-iteration-count: infinite;를 주게되면 무한반복을 하게된다!!!!

-transition-timing-function 종류(애니메이션)
linear : 선형으로 변화, 처음부터 끝까지 속도가 동일하다.
ease : 처음에 천천히 시작하여 빨라지며 마지막에 다시 느려진다.
ease-in : 처음에 천천히 시작하여 마지막에 속도가 올라가고 끝난다.
ease-out : 처음에 빠른속도에서 시작하여 마지막에 천천히 속도를 줄여 끝남.
ease-in-out : 천천히 시작되어 정상 속도가 되었다가 마지막에 느려진다.

-  모바일 기기를 위한 viewport 설정
    이 설정을 안하면 pc화면의 내용 -> 모바일 화면 : 글자가 작아진다.

    viewport 개념 전 : px, %
    viewport 개념 후 : px, %
                        vw : 1vw = 뷰포트 너비의 1%,ex) 100vw : 화면 너비와 동일
                        vh : 1vh = 뷰포트 높이의 1%
                        vmin : 뷰포트의 너비와 높이 중에서 작은 값의 1%와 같다
                        vmax : 뷰포트의 너비와 높이 중에서 큰 값의 1%와 같다.

-mediaquery(02예제)
어떤 스타일을 선택적으로 적용하고 싶을 때 사용한다. 다른 프로그래밍 언어의
if 조건문과 비슷한 개념이라고 생각하면 이해가 쉽다.
ex) @media (조건){
    스타일
}
스타일 부분에는 일반적인 css 코드가 들어가는데, 조건 부분이 만족될 때는
스타일이 적용되고, 만족되지 않을 때는 스타일이 무시된다.

-display:flex
/*display:flex 는 주축과 교차축이 존재한다.
일단 주축을 정해주면 수직방향은 자동으로 교차축이 된다.
container 같은 부분에 display:flex를 입력하고
따로 밑의 코드처럼 추가해주면 된다.
   
#opt1{flex-direction: row;}
#opt2{flex-direction: row-reverse;}
#opt3{flex-direction: column;}
#opt4{flex-direction: column-reverse;}
       
row: 가로를 주축, 좌->우, 기본값
row-reverse : 가로를 주축, 우->좌
column: 세로를 주축, 상->하, 기본값
column-reverse : 가로를 주축, 하->상
    

-css속성에서 display:flex는 요소들을 간단하게 가로 또는 세로방향으로
정렬할 수 있습니다. 주의사항은 각 요소들의 부모요소에 display:flex
설정을 해야한다는 것입니다.

-flex-wrap의 속성값들(https://blog.naver.com/pjh445/221160742046)
nowrap : 부모 넓이에 맞게 요소들의 넓이를 강제 축소
wrap : 부모 넓이보다 요소들의 총 넓이가 크다면 나머지 요소들을
        다음줄로 바꿈
wrap-reverse : 줄바꿈 하는 요소들을 역순으로 배열
initial : 기본값(nowrap)
inherit : 부모요소의 설정값을 사용

-flex-flow = flex-direction + flex-wrap*/

-justify-content 시작위치, 간격을 설정해준다.(06)
flex-direction이 row일때는 왼쪽에서, column일때는 위에서 정렬된다.

center:아이템들을 가운데로 정렬한다.
space-between:아이템들의 "사이"에 균일한 간격을 만들어준다.
space-around:아이템들의 "둘레"에 균일한 간격을 만들어준다.
space-evenly:아이템들의 사이와 양 끝에 일정한 간격을 만들어준다.

ex)
#opt1{justify-content: flex-start;}
#opt2{justify-content: flex-end;}
#opt3{justify-content: center;}

-align-items(세로 교차축)
#opt4{align-items: baseline;} /* 문자 기준선에 맞춰 배치*/
#opt5{align-items: stretch;} /*항목을 늘려준다(스트레칭 !)*/

-align-self
전체가 아닌 교차축의 정렬을 개별적으로 설정하고 싶을 때 사용한다.
 <div class="container">
        <div class="box" id="box1"><p>1</p></div>
        <div class="box"><p>2</p></div>
        <div class="box" id="box3"><p>3</p></div>
        <div class="box"><p>4</p></div>
    </div> 의 경우 box1,box3만 따로 스타일을 만들어 값을 주는 경우에
    align-self를 사용해서 바꿔준다!!

-align-content
주축에서 줄바꿈이 되어 여러 줄로 표현될 때 교차축의 항목간의 간격 지정
(2줄 이상일 때 사용한다.)
flex-wrap:no wrap의 경우 줄바꿈이 되지 않기 때문에 align-content는
사용이 불가능하다. flex-wrap:wrap일 경우에는 화면 크기에 맞춰 줄바꿈이
자동으로 되므로 사용이 가능하다.

-grid(11~17 예제)
flex와 마찬가지로, grid는 컨테이너에 display:grid;를 설정하는 것으로
시작한다.
ex).container{
    display:grid;
}

 grid-template-areas:
                "box1 box1 box1"
                "box2 box3 box3"
                "box2 . box4"
                해당 형태로 위치를 지정해주어 그대로 나타낼 수 있다.


-사이트 맵 만드는 법 ~~~***
구글링 하면 돼~~!!

-와이어 프레임

-transparent
border에서 투명한 프레임을 적용해준다.(white와는 다르다!!)


